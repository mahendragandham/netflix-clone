{"ast":null,"code":"var _jsxFileName = \"/Users/conquer/Documents/github/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerIUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/conquer/Documents/github/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","table","map","poster_path","backdrop_path","id","trailerIUrl"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AACA,MAAMC,OAAO,GAAG,sCAAhB;;AACA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AAQA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGb,UAAH,EAAe;AACXC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEO;AACHT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAS;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OAJD,EAIGiB,KAJH,CAIUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJpB;AAKH;AACJ,GAVD;;AAWAC,EAAAA,OAAO,CAACE,KAAR,CAAc3B,MAAd;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAAC4B,GAAP,CAAWb,KAAK,iBACb;AACA,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAD1B;AAEA,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAF3D;AAGC,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,UAAU,GAAGgB,KAAK,CAACc,WAAT,GAAuBd,KAAK,CAACe,aAAc,EAHxE;AAG2E,QAAA,GAAG,EAAEf,KAAK,CAACC;AAHtF,SAAUD,KAAK,CAACgB,EAAhB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEC,WAAlB;AAA+B,MAAA,IAAI,EAAEvB;AAArC;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GA5CQb,G;;KAAAA,G;AA8CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]); \n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n    const opts = {\n        height: \"390\",\n        width: \"100%\", \n        playerVars: {\n            autoplay: 1,\n        },\n    };\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'))\n            }).catch((error) => console.log(error));\n        }\n    };\n    console.table(movies);\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map(movie =>(\n                    <img key={movie.id} \n                    onClick={() => handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                     src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\n                ))}\n            </div>\n            <Youtube videoId={trailerIUrl} opts={opts} />\n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}